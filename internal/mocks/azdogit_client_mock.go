// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/git (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination internal/mocks/azdogit_client_mock.go -mock_names Client=MockAzDOGitClient github.com/microsoft/azure-devops-go-api/azuredevops/v7/git Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	core "github.com/microsoft/azure-devops-go-api/azuredevops/v7/core"
	git "github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"
	webapi "github.com/microsoft/azure-devops-go-api/azuredevops/v7/webapi"
	gomock "go.uber.org/mock/gomock"
)

// MockAzDOGitClient is a mock of Client interface.
type MockAzDOGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzDOGitClientMockRecorder
	isgomock struct{}
}

// MockAzDOGitClientMockRecorder is the mock recorder for MockAzDOGitClient.
type MockAzDOGitClientMockRecorder struct {
	mock *MockAzDOGitClient
}

// NewMockAzDOGitClient creates a new mock instance.
func NewMockAzDOGitClient(ctrl *gomock.Controller) *MockAzDOGitClient {
	mock := &MockAzDOGitClient{ctrl: ctrl}
	mock.recorder = &MockAzDOGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzDOGitClient) EXPECT() *MockAzDOGitClientMockRecorder {
	return m.recorder
}

// CreateAnnotatedTag mocks base method.
func (m *MockAzDOGitClient) CreateAnnotatedTag(arg0 context.Context, arg1 git.CreateAnnotatedTagArgs) (*git.GitAnnotatedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotatedTag", arg0, arg1)
	ret0, _ := ret[0].(*git.GitAnnotatedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnotatedTag indicates an expected call of CreateAnnotatedTag.
func (mr *MockAzDOGitClientMockRecorder) CreateAnnotatedTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotatedTag", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateAnnotatedTag), arg0, arg1)
}

// CreateAttachment mocks base method.
func (m *MockAzDOGitClient) CreateAttachment(arg0 context.Context, arg1 git.CreateAttachmentArgs) (*git.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", arg0, arg1)
	ret0, _ := ret[0].(*git.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockAzDOGitClientMockRecorder) CreateAttachment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateAttachment), arg0, arg1)
}

// CreateCherryPick mocks base method.
func (m *MockAzDOGitClient) CreateCherryPick(arg0 context.Context, arg1 git.CreateCherryPickArgs) (*git.GitCherryPick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCherryPick", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCherryPick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCherryPick indicates an expected call of CreateCherryPick.
func (mr *MockAzDOGitClientMockRecorder) CreateCherryPick(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCherryPick", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateCherryPick), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockAzDOGitClient) CreateComment(arg0 context.Context, arg1 git.CreateCommentArgs) (*git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockAzDOGitClientMockRecorder) CreateComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateComment), arg0, arg1)
}

// CreateCommitStatus mocks base method.
func (m *MockAzDOGitClient) CreateCommitStatus(arg0 context.Context, arg1 git.CreateCommitStatusArgs) (*git.GitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommitStatus", arg0, arg1)
	ret0, _ := ret[0].(*git.GitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus.
func (mr *MockAzDOGitClientMockRecorder) CreateCommitStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateCommitStatus), arg0, arg1)
}

// CreateFavorite mocks base method.
func (m *MockAzDOGitClient) CreateFavorite(arg0 context.Context, arg1 git.CreateFavoriteArgs) (*git.GitRefFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRefFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockAzDOGitClientMockRecorder) CreateFavorite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateFavorite), arg0, arg1)
}

// CreateForkSyncRequest mocks base method.
func (m *MockAzDOGitClient) CreateForkSyncRequest(arg0 context.Context, arg1 git.CreateForkSyncRequestArgs) (*git.GitForkSyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForkSyncRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitForkSyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForkSyncRequest indicates an expected call of CreateForkSyncRequest.
func (mr *MockAzDOGitClientMockRecorder) CreateForkSyncRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForkSyncRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateForkSyncRequest), arg0, arg1)
}

// CreateImportRequest mocks base method.
func (m *MockAzDOGitClient) CreateImportRequest(arg0 context.Context, arg1 git.CreateImportRequestArgs) (*git.GitImportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImportRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitImportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImportRequest indicates an expected call of CreateImportRequest.
func (mr *MockAzDOGitClientMockRecorder) CreateImportRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImportRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateImportRequest), arg0, arg1)
}

// CreateLike mocks base method.
func (m *MockAzDOGitClient) CreateLike(arg0 context.Context, arg1 git.CreateLikeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockAzDOGitClientMockRecorder) CreateLike(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateLike), arg0, arg1)
}

// CreateMergeRequest mocks base method.
func (m *MockAzDOGitClient) CreateMergeRequest(arg0 context.Context, arg1 git.CreateMergeRequestArgs) (*git.GitMerge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMergeRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitMerge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMergeRequest indicates an expected call of CreateMergeRequest.
func (mr *MockAzDOGitClientMockRecorder) CreateMergeRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateMergeRequest), arg0, arg1)
}

// CreatePullRequest mocks base method.
func (m *MockAzDOGitClient) CreatePullRequest(arg0 context.Context, arg1 git.CreatePullRequestArgs) (*git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequest), arg0, arg1)
}

// CreatePullRequestIterationStatus mocks base method.
func (m *MockAzDOGitClient) CreatePullRequestIterationStatus(arg0 context.Context, arg1 git.CreatePullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestIterationStatus", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestIterationStatus indicates an expected call of CreatePullRequestIterationStatus.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequestIterationStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestIterationStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequestIterationStatus), arg0, arg1)
}

// CreatePullRequestLabel mocks base method.
func (m *MockAzDOGitClient) CreatePullRequestLabel(arg0 context.Context, arg1 git.CreatePullRequestLabelArgs) (*core.WebApiTagDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestLabel", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiTagDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestLabel indicates an expected call of CreatePullRequestLabel.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequestLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestLabel", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequestLabel), arg0, arg1)
}

// CreatePullRequestReviewer mocks base method.
func (m *MockAzDOGitClient) CreatePullRequestReviewer(arg0 context.Context, arg1 git.CreatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestReviewer", arg0, arg1)
	ret0, _ := ret[0].(*git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestReviewer indicates an expected call of CreatePullRequestReviewer.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequestReviewer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestReviewer", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequestReviewer), arg0, arg1)
}

// CreatePullRequestReviewers mocks base method.
func (m *MockAzDOGitClient) CreatePullRequestReviewers(arg0 context.Context, arg1 git.CreatePullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestReviewers", arg0, arg1)
	ret0, _ := ret[0].(*[]git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestReviewers indicates an expected call of CreatePullRequestReviewers.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequestReviewers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestReviewers", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequestReviewers), arg0, arg1)
}

// CreatePullRequestStatus mocks base method.
func (m *MockAzDOGitClient) CreatePullRequestStatus(arg0 context.Context, arg1 git.CreatePullRequestStatusArgs) (*git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestStatus indicates an expected call of CreatePullRequestStatus.
func (mr *MockAzDOGitClientMockRecorder) CreatePullRequestStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePullRequestStatus), arg0, arg1)
}

// CreatePush mocks base method.
func (m *MockAzDOGitClient) CreatePush(arg0 context.Context, arg1 git.CreatePushArgs) (*git.GitPush, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePush", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePush indicates an expected call of CreatePush.
func (mr *MockAzDOGitClientMockRecorder) CreatePush(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePush", reflect.TypeOf((*MockAzDOGitClient)(nil).CreatePush), arg0, arg1)
}

// CreateRepository mocks base method.
func (m *MockAzDOGitClient) CreateRepository(arg0 context.Context, arg1 git.CreateRepositoryArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockAzDOGitClientMockRecorder) CreateRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateRepository), arg0, arg1)
}

// CreateRevert mocks base method.
func (m *MockAzDOGitClient) CreateRevert(arg0 context.Context, arg1 git.CreateRevertArgs) (*git.GitRevert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevert", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRevert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevert indicates an expected call of CreateRevert.
func (mr *MockAzDOGitClientMockRecorder) CreateRevert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevert", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateRevert), arg0, arg1)
}

// CreateThread mocks base method.
func (m *MockAzDOGitClient) CreateThread(arg0 context.Context, arg1 git.CreateThreadArgs) (*git.GitPullRequestCommentThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThread", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestCommentThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThread indicates an expected call of CreateThread.
func (mr *MockAzDOGitClientMockRecorder) CreateThread(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThread", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateThread), arg0, arg1)
}

// CreateUnmaterializedPullRequestReviewer mocks base method.
func (m *MockAzDOGitClient) CreateUnmaterializedPullRequestReviewer(arg0 context.Context, arg1 git.CreateUnmaterializedPullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnmaterializedPullRequestReviewer", arg0, arg1)
	ret0, _ := ret[0].(*git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnmaterializedPullRequestReviewer indicates an expected call of CreateUnmaterializedPullRequestReviewer.
func (mr *MockAzDOGitClientMockRecorder) CreateUnmaterializedPullRequestReviewer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnmaterializedPullRequestReviewer", reflect.TypeOf((*MockAzDOGitClient)(nil).CreateUnmaterializedPullRequestReviewer), arg0, arg1)
}

// DeleteAttachment mocks base method.
func (m *MockAzDOGitClient) DeleteAttachment(arg0 context.Context, arg1 git.DeleteAttachmentArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockAzDOGitClientMockRecorder) DeleteAttachment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteAttachment), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockAzDOGitClient) DeleteComment(arg0 context.Context, arg1 git.DeleteCommentArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockAzDOGitClientMockRecorder) DeleteComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteComment), arg0, arg1)
}

// DeleteLike mocks base method.
func (m *MockAzDOGitClient) DeleteLike(arg0 context.Context, arg1 git.DeleteLikeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockAzDOGitClientMockRecorder) DeleteLike(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteLike), arg0, arg1)
}

// DeletePullRequestIterationStatus mocks base method.
func (m *MockAzDOGitClient) DeletePullRequestIterationStatus(arg0 context.Context, arg1 git.DeletePullRequestIterationStatusArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestIterationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequestIterationStatus indicates an expected call of DeletePullRequestIterationStatus.
func (mr *MockAzDOGitClientMockRecorder) DeletePullRequestIterationStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestIterationStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).DeletePullRequestIterationStatus), arg0, arg1)
}

// DeletePullRequestLabels mocks base method.
func (m *MockAzDOGitClient) DeletePullRequestLabels(arg0 context.Context, arg1 git.DeletePullRequestLabelsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequestLabels indicates an expected call of DeletePullRequestLabels.
func (mr *MockAzDOGitClientMockRecorder) DeletePullRequestLabels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestLabels", reflect.TypeOf((*MockAzDOGitClient)(nil).DeletePullRequestLabels), arg0, arg1)
}

// DeletePullRequestReviewer mocks base method.
func (m *MockAzDOGitClient) DeletePullRequestReviewer(arg0 context.Context, arg1 git.DeletePullRequestReviewerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestReviewer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequestReviewer indicates an expected call of DeletePullRequestReviewer.
func (mr *MockAzDOGitClientMockRecorder) DeletePullRequestReviewer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestReviewer", reflect.TypeOf((*MockAzDOGitClient)(nil).DeletePullRequestReviewer), arg0, arg1)
}

// DeletePullRequestStatus mocks base method.
func (m *MockAzDOGitClient) DeletePullRequestStatus(arg0 context.Context, arg1 git.DeletePullRequestStatusArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequestStatus indicates an expected call of DeletePullRequestStatus.
func (mr *MockAzDOGitClientMockRecorder) DeletePullRequestStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).DeletePullRequestStatus), arg0, arg1)
}

// DeleteRefFavorite mocks base method.
func (m *MockAzDOGitClient) DeleteRefFavorite(arg0 context.Context, arg1 git.DeleteRefFavoriteArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefFavorite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefFavorite indicates an expected call of DeleteRefFavorite.
func (mr *MockAzDOGitClientMockRecorder) DeleteRefFavorite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefFavorite", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteRefFavorite), arg0, arg1)
}

// DeleteRepository mocks base method.
func (m *MockAzDOGitClient) DeleteRepository(arg0 context.Context, arg1 git.DeleteRepositoryArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockAzDOGitClientMockRecorder) DeleteRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteRepository), arg0, arg1)
}

// DeleteRepositoryFromRecycleBin mocks base method.
func (m *MockAzDOGitClient) DeleteRepositoryFromRecycleBin(arg0 context.Context, arg1 git.DeleteRepositoryFromRecycleBinArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryFromRecycleBin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepositoryFromRecycleBin indicates an expected call of DeleteRepositoryFromRecycleBin.
func (mr *MockAzDOGitClientMockRecorder) DeleteRepositoryFromRecycleBin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryFromRecycleBin", reflect.TypeOf((*MockAzDOGitClient)(nil).DeleteRepositoryFromRecycleBin), arg0, arg1)
}

// GetAnnotatedTag mocks base method.
func (m *MockAzDOGitClient) GetAnnotatedTag(arg0 context.Context, arg1 git.GetAnnotatedTagArgs) (*git.GitAnnotatedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotatedTag", arg0, arg1)
	ret0, _ := ret[0].(*git.GitAnnotatedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotatedTag indicates an expected call of GetAnnotatedTag.
func (mr *MockAzDOGitClientMockRecorder) GetAnnotatedTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotatedTag", reflect.TypeOf((*MockAzDOGitClient)(nil).GetAnnotatedTag), arg0, arg1)
}

// GetAttachmentContent mocks base method.
func (m *MockAzDOGitClient) GetAttachmentContent(arg0 context.Context, arg1 git.GetAttachmentContentArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentContent", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentContent indicates an expected call of GetAttachmentContent.
func (mr *MockAzDOGitClientMockRecorder) GetAttachmentContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentContent", reflect.TypeOf((*MockAzDOGitClient)(nil).GetAttachmentContent), arg0, arg1)
}

// GetAttachmentZip mocks base method.
func (m *MockAzDOGitClient) GetAttachmentZip(arg0 context.Context, arg1 git.GetAttachmentZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentZip indicates an expected call of GetAttachmentZip.
func (mr *MockAzDOGitClientMockRecorder) GetAttachmentZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentZip", reflect.TypeOf((*MockAzDOGitClient)(nil).GetAttachmentZip), arg0, arg1)
}

// GetAttachments mocks base method.
func (m *MockAzDOGitClient) GetAttachments(arg0 context.Context, arg1 git.GetAttachmentsArgs) (*[]git.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachments", arg0, arg1)
	ret0, _ := ret[0].(*[]git.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachments indicates an expected call of GetAttachments.
func (mr *MockAzDOGitClientMockRecorder) GetAttachments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachments", reflect.TypeOf((*MockAzDOGitClient)(nil).GetAttachments), arg0, arg1)
}

// GetBlob mocks base method.
func (m *MockAzDOGitClient) GetBlob(arg0 context.Context, arg1 git.GetBlobArgs) (*git.GitBlobRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1)
	ret0, _ := ret[0].(*git.GitBlobRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockAzDOGitClientMockRecorder) GetBlob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBlob), arg0, arg1)
}

// GetBlobContent mocks base method.
func (m *MockAzDOGitClient) GetBlobContent(arg0 context.Context, arg1 git.GetBlobContentArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobContent", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobContent indicates an expected call of GetBlobContent.
func (mr *MockAzDOGitClientMockRecorder) GetBlobContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobContent", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBlobContent), arg0, arg1)
}

// GetBlobZip mocks base method.
func (m *MockAzDOGitClient) GetBlobZip(arg0 context.Context, arg1 git.GetBlobZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobZip indicates an expected call of GetBlobZip.
func (mr *MockAzDOGitClientMockRecorder) GetBlobZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobZip", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBlobZip), arg0, arg1)
}

// GetBlobsZip mocks base method.
func (m *MockAzDOGitClient) GetBlobsZip(arg0 context.Context, arg1 git.GetBlobsZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobsZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobsZip indicates an expected call of GetBlobsZip.
func (mr *MockAzDOGitClientMockRecorder) GetBlobsZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobsZip", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBlobsZip), arg0, arg1)
}

// GetBranch mocks base method.
func (m *MockAzDOGitClient) GetBranch(arg0 context.Context, arg1 git.GetBranchArgs) (*git.GitBranchStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(*git.GitBranchStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockAzDOGitClientMockRecorder) GetBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBranch), arg0, arg1)
}

// GetBranches mocks base method.
func (m *MockAzDOGitClient) GetBranches(arg0 context.Context, arg1 git.GetBranchesArgs) (*[]git.GitBranchStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitBranchStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockAzDOGitClientMockRecorder) GetBranches(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockAzDOGitClient)(nil).GetBranches), arg0, arg1)
}

// GetChanges mocks base method.
func (m *MockAzDOGitClient) GetChanges(arg0 context.Context, arg1 git.GetChangesArgs) (*git.GitCommitChanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCommitChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChanges indicates an expected call of GetChanges.
func (mr *MockAzDOGitClientMockRecorder) GetChanges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockAzDOGitClient)(nil).GetChanges), arg0, arg1)
}

// GetCherryPick mocks base method.
func (m *MockAzDOGitClient) GetCherryPick(arg0 context.Context, arg1 git.GetCherryPickArgs) (*git.GitCherryPick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCherryPick", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCherryPick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCherryPick indicates an expected call of GetCherryPick.
func (mr *MockAzDOGitClientMockRecorder) GetCherryPick(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCherryPick", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCherryPick), arg0, arg1)
}

// GetCherryPickForRefName mocks base method.
func (m *MockAzDOGitClient) GetCherryPickForRefName(arg0 context.Context, arg1 git.GetCherryPickForRefNameArgs) (*git.GitCherryPick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCherryPickForRefName", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCherryPick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCherryPickForRefName indicates an expected call of GetCherryPickForRefName.
func (mr *MockAzDOGitClientMockRecorder) GetCherryPickForRefName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCherryPickForRefName", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCherryPickForRefName), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockAzDOGitClient) GetComment(arg0 context.Context, arg1 git.GetCommentArgs) (*git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(*git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockAzDOGitClientMockRecorder) GetComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockAzDOGitClient)(nil).GetComment), arg0, arg1)
}

// GetComments mocks base method.
func (m *MockAzDOGitClient) GetComments(arg0 context.Context, arg1 git.GetCommentsArgs) (*[]git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1)
	ret0, _ := ret[0].(*[]git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockAzDOGitClientMockRecorder) GetComments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockAzDOGitClient)(nil).GetComments), arg0, arg1)
}

// GetCommit mocks base method.
func (m *MockAzDOGitClient) GetCommit(arg0 context.Context, arg1 git.GetCommitArgs) (*git.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockAzDOGitClientMockRecorder) GetCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCommit), arg0, arg1)
}

// GetCommitDiffs mocks base method.
func (m *MockAzDOGitClient) GetCommitDiffs(arg0 context.Context, arg1 git.GetCommitDiffsArgs) (*git.GitCommitDiffs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitDiffs", arg0, arg1)
	ret0, _ := ret[0].(*git.GitCommitDiffs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitDiffs indicates an expected call of GetCommitDiffs.
func (mr *MockAzDOGitClientMockRecorder) GetCommitDiffs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitDiffs", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCommitDiffs), arg0, arg1)
}

// GetCommits mocks base method.
func (m *MockAzDOGitClient) GetCommits(arg0 context.Context, arg1 git.GetCommitsArgs) (*[]git.GitCommitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommits", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitCommitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommits indicates an expected call of GetCommits.
func (mr *MockAzDOGitClientMockRecorder) GetCommits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommits", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCommits), arg0, arg1)
}

// GetCommitsBatch mocks base method.
func (m *MockAzDOGitClient) GetCommitsBatch(arg0 context.Context, arg1 git.GetCommitsBatchArgs) (*[]git.GitCommitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsBatch", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitCommitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsBatch indicates an expected call of GetCommitsBatch.
func (mr *MockAzDOGitClientMockRecorder) GetCommitsBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsBatch", reflect.TypeOf((*MockAzDOGitClient)(nil).GetCommitsBatch), arg0, arg1)
}

// GetDeletedRepositories mocks base method.
func (m *MockAzDOGitClient) GetDeletedRepositories(arg0 context.Context, arg1 git.GetDeletedRepositoriesArgs) (*[]git.GitDeletedRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedRepositories", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitDeletedRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedRepositories indicates an expected call of GetDeletedRepositories.
func (mr *MockAzDOGitClientMockRecorder) GetDeletedRepositories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedRepositories", reflect.TypeOf((*MockAzDOGitClient)(nil).GetDeletedRepositories), arg0, arg1)
}

// GetForkSyncRequest mocks base method.
func (m *MockAzDOGitClient) GetForkSyncRequest(arg0 context.Context, arg1 git.GetForkSyncRequestArgs) (*git.GitForkSyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForkSyncRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitForkSyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForkSyncRequest indicates an expected call of GetForkSyncRequest.
func (mr *MockAzDOGitClientMockRecorder) GetForkSyncRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForkSyncRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).GetForkSyncRequest), arg0, arg1)
}

// GetForkSyncRequests mocks base method.
func (m *MockAzDOGitClient) GetForkSyncRequests(arg0 context.Context, arg1 git.GetForkSyncRequestsArgs) (*[]git.GitForkSyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForkSyncRequests", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitForkSyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForkSyncRequests indicates an expected call of GetForkSyncRequests.
func (mr *MockAzDOGitClientMockRecorder) GetForkSyncRequests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForkSyncRequests", reflect.TypeOf((*MockAzDOGitClient)(nil).GetForkSyncRequests), arg0, arg1)
}

// GetForks mocks base method.
func (m *MockAzDOGitClient) GetForks(arg0 context.Context, arg1 git.GetForksArgs) (*[]git.GitRepositoryRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForks", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitRepositoryRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForks indicates an expected call of GetForks.
func (mr *MockAzDOGitClientMockRecorder) GetForks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForks", reflect.TypeOf((*MockAzDOGitClient)(nil).GetForks), arg0, arg1)
}

// GetImportRequest mocks base method.
func (m *MockAzDOGitClient) GetImportRequest(arg0 context.Context, arg1 git.GetImportRequestArgs) (*git.GitImportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitImportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportRequest indicates an expected call of GetImportRequest.
func (mr *MockAzDOGitClientMockRecorder) GetImportRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).GetImportRequest), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockAzDOGitClient) GetItem(arg0 context.Context, arg1 git.GetItemArgs) (*git.GitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(*git.GitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockAzDOGitClientMockRecorder) GetItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItem), arg0, arg1)
}

// GetItemContent mocks base method.
func (m *MockAzDOGitClient) GetItemContent(arg0 context.Context, arg1 git.GetItemContentArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemContent", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemContent indicates an expected call of GetItemContent.
func (mr *MockAzDOGitClientMockRecorder) GetItemContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemContent", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItemContent), arg0, arg1)
}

// GetItemText mocks base method.
func (m *MockAzDOGitClient) GetItemText(arg0 context.Context, arg1 git.GetItemTextArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemText", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemText indicates an expected call of GetItemText.
func (mr *MockAzDOGitClientMockRecorder) GetItemText(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemText", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItemText), arg0, arg1)
}

// GetItemZip mocks base method.
func (m *MockAzDOGitClient) GetItemZip(arg0 context.Context, arg1 git.GetItemZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemZip indicates an expected call of GetItemZip.
func (mr *MockAzDOGitClientMockRecorder) GetItemZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemZip", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItemZip), arg0, arg1)
}

// GetItems mocks base method.
func (m *MockAzDOGitClient) GetItems(arg0 context.Context, arg1 git.GetItemsArgs) (*[]git.GitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockAzDOGitClientMockRecorder) GetItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItems), arg0, arg1)
}

// GetItemsBatch mocks base method.
func (m *MockAzDOGitClient) GetItemsBatch(arg0 context.Context, arg1 git.GetItemsBatchArgs) (*[][]git.GitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBatch", arg0, arg1)
	ret0, _ := ret[0].(*[][]git.GitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBatch indicates an expected call of GetItemsBatch.
func (mr *MockAzDOGitClientMockRecorder) GetItemsBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBatch", reflect.TypeOf((*MockAzDOGitClient)(nil).GetItemsBatch), arg0, arg1)
}

// GetLikes mocks base method.
func (m *MockAzDOGitClient) GetLikes(arg0 context.Context, arg1 git.GetLikesArgs) (*[]webapi.IdentityRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikes", arg0, arg1)
	ret0, _ := ret[0].(*[]webapi.IdentityRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikes indicates an expected call of GetLikes.
func (mr *MockAzDOGitClientMockRecorder) GetLikes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikes", reflect.TypeOf((*MockAzDOGitClient)(nil).GetLikes), arg0, arg1)
}

// GetMergeBases mocks base method.
func (m *MockAzDOGitClient) GetMergeBases(arg0 context.Context, arg1 git.GetMergeBasesArgs) (*[]git.GitCommitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeBases", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitCommitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeBases indicates an expected call of GetMergeBases.
func (mr *MockAzDOGitClientMockRecorder) GetMergeBases(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeBases", reflect.TypeOf((*MockAzDOGitClient)(nil).GetMergeBases), arg0, arg1)
}

// GetMergeRequest mocks base method.
func (m *MockAzDOGitClient) GetMergeRequest(arg0 context.Context, arg1 git.GetMergeRequestArgs) (*git.GitMerge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitMerge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeRequest indicates an expected call of GetMergeRequest.
func (mr *MockAzDOGitClientMockRecorder) GetMergeRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).GetMergeRequest), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockAzDOGitClient) GetPermission(arg0 context.Context, arg1 git.GetPermissionArgs) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockAzDOGitClientMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPermission), arg0, arg1)
}

// GetPolicyConfigurations mocks base method.
func (m *MockAzDOGitClient) GetPolicyConfigurations(arg0 context.Context, arg1 git.GetPolicyConfigurationsArgs) (*git.GitPolicyConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyConfigurations", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPolicyConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyConfigurations indicates an expected call of GetPolicyConfigurations.
func (mr *MockAzDOGitClientMockRecorder) GetPolicyConfigurations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyConfigurations", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPolicyConfigurations), arg0, arg1)
}

// GetPullRequest mocks base method.
func (m *MockAzDOGitClient) GetPullRequest(arg0 context.Context, arg1 git.GetPullRequestArgs) (*git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequest), arg0, arg1)
}

// GetPullRequestById mocks base method.
func (m *MockAzDOGitClient) GetPullRequestById(arg0 context.Context, arg1 git.GetPullRequestByIdArgs) (*git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestById", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestById indicates an expected call of GetPullRequestById.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestById", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestById), arg0, arg1)
}

// GetPullRequestCommits mocks base method.
func (m *MockAzDOGitClient) GetPullRequestCommits(arg0 context.Context, arg1 git.GetPullRequestCommitsArgs) (*git.GetPullRequestCommitsResponseValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestCommits", arg0, arg1)
	ret0, _ := ret[0].(*git.GetPullRequestCommitsResponseValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestCommits indicates an expected call of GetPullRequestCommits.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestCommits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestCommits", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestCommits), arg0, arg1)
}

// GetPullRequestIteration mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIteration(arg0 context.Context, arg1 git.GetPullRequestIterationArgs) (*git.GitPullRequestIteration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIteration", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestIteration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIteration indicates an expected call of GetPullRequestIteration.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIteration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIteration", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIteration), arg0, arg1)
}

// GetPullRequestIterationChanges mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIterationChanges(arg0 context.Context, arg1 git.GetPullRequestIterationChangesArgs) (*git.GitPullRequestIterationChanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIterationChanges", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestIterationChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIterationChanges indicates an expected call of GetPullRequestIterationChanges.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIterationChanges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIterationChanges", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIterationChanges), arg0, arg1)
}

// GetPullRequestIterationCommits mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIterationCommits(arg0 context.Context, arg1 git.GetPullRequestIterationCommitsArgs) (*[]git.GitCommitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIterationCommits", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitCommitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIterationCommits indicates an expected call of GetPullRequestIterationCommits.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIterationCommits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIterationCommits", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIterationCommits), arg0, arg1)
}

// GetPullRequestIterationStatus mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIterationStatus(arg0 context.Context, arg1 git.GetPullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIterationStatus", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIterationStatus indicates an expected call of GetPullRequestIterationStatus.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIterationStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIterationStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIterationStatus), arg0, arg1)
}

// GetPullRequestIterationStatuses mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIterationStatuses(arg0 context.Context, arg1 git.GetPullRequestIterationStatusesArgs) (*[]git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIterationStatuses", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIterationStatuses indicates an expected call of GetPullRequestIterationStatuses.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIterationStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIterationStatuses", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIterationStatuses), arg0, arg1)
}

// GetPullRequestIterations mocks base method.
func (m *MockAzDOGitClient) GetPullRequestIterations(arg0 context.Context, arg1 git.GetPullRequestIterationsArgs) (*[]git.GitPullRequestIteration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestIterations", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequestIteration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestIterations indicates an expected call of GetPullRequestIterations.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestIterations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestIterations", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestIterations), arg0, arg1)
}

// GetPullRequestLabel mocks base method.
func (m *MockAzDOGitClient) GetPullRequestLabel(arg0 context.Context, arg1 git.GetPullRequestLabelArgs) (*core.WebApiTagDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestLabel", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiTagDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestLabel indicates an expected call of GetPullRequestLabel.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestLabel", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestLabel), arg0, arg1)
}

// GetPullRequestLabels mocks base method.
func (m *MockAzDOGitClient) GetPullRequestLabels(arg0 context.Context, arg1 git.GetPullRequestLabelsArgs) (*[]core.WebApiTagDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestLabels", arg0, arg1)
	ret0, _ := ret[0].(*[]core.WebApiTagDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestLabels indicates an expected call of GetPullRequestLabels.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestLabels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestLabels", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestLabels), arg0, arg1)
}

// GetPullRequestProperties mocks base method.
func (m *MockAzDOGitClient) GetPullRequestProperties(arg0 context.Context, arg1 git.GetPullRequestPropertiesArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestProperties", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestProperties indicates an expected call of GetPullRequestProperties.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestProperties(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestProperties", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestProperties), arg0, arg1)
}

// GetPullRequestQuery mocks base method.
func (m *MockAzDOGitClient) GetPullRequestQuery(arg0 context.Context, arg1 git.GetPullRequestQueryArgs) (*git.GitPullRequestQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestQuery", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestQuery indicates an expected call of GetPullRequestQuery.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestQuery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestQuery", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestQuery), arg0, arg1)
}

// GetPullRequestReviewer mocks base method.
func (m *MockAzDOGitClient) GetPullRequestReviewer(arg0 context.Context, arg1 git.GetPullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestReviewer", arg0, arg1)
	ret0, _ := ret[0].(*git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestReviewer indicates an expected call of GetPullRequestReviewer.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestReviewer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestReviewer", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestReviewer), arg0, arg1)
}

// GetPullRequestReviewers mocks base method.
func (m *MockAzDOGitClient) GetPullRequestReviewers(arg0 context.Context, arg1 git.GetPullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestReviewers", arg0, arg1)
	ret0, _ := ret[0].(*[]git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestReviewers indicates an expected call of GetPullRequestReviewers.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestReviewers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestReviewers", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestReviewers), arg0, arg1)
}

// GetPullRequestStatus mocks base method.
func (m *MockAzDOGitClient) GetPullRequestStatus(arg0 context.Context, arg1 git.GetPullRequestStatusArgs) (*git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestStatus indicates an expected call of GetPullRequestStatus.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestStatus", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestStatus), arg0, arg1)
}

// GetPullRequestStatuses mocks base method.
func (m *MockAzDOGitClient) GetPullRequestStatuses(arg0 context.Context, arg1 git.GetPullRequestStatusesArgs) (*[]git.GitPullRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestStatuses", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestStatuses indicates an expected call of GetPullRequestStatuses.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestStatuses", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestStatuses), arg0, arg1)
}

// GetPullRequestThread mocks base method.
func (m *MockAzDOGitClient) GetPullRequestThread(arg0 context.Context, arg1 git.GetPullRequestThreadArgs) (*git.GitPullRequestCommentThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestThread", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestCommentThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestThread indicates an expected call of GetPullRequestThread.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestThread(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestThread", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestThread), arg0, arg1)
}

// GetPullRequestWorkItemRefs mocks base method.
func (m *MockAzDOGitClient) GetPullRequestWorkItemRefs(arg0 context.Context, arg1 git.GetPullRequestWorkItemRefsArgs) (*[]webapi.ResourceRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestWorkItemRefs", arg0, arg1)
	ret0, _ := ret[0].(*[]webapi.ResourceRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestWorkItemRefs indicates an expected call of GetPullRequestWorkItemRefs.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestWorkItemRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestWorkItemRefs", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestWorkItemRefs), arg0, arg1)
}

// GetPullRequests mocks base method.
func (m *MockAzDOGitClient) GetPullRequests(arg0 context.Context, arg1 git.GetPullRequestsArgs) (*[]git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequests), arg0, arg1)
}

// GetPullRequestsByProject mocks base method.
func (m *MockAzDOGitClient) GetPullRequestsByProject(arg0 context.Context, arg1 git.GetPullRequestsByProjectArgs) (*[]git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestsByProject", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestsByProject indicates an expected call of GetPullRequestsByProject.
func (mr *MockAzDOGitClientMockRecorder) GetPullRequestsByProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestsByProject", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPullRequestsByProject), arg0, arg1)
}

// GetPush mocks base method.
func (m *MockAzDOGitClient) GetPush(arg0 context.Context, arg1 git.GetPushArgs) (*git.GitPush, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPush", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPush indicates an expected call of GetPush.
func (mr *MockAzDOGitClientMockRecorder) GetPush(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPush", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPush), arg0, arg1)
}

// GetPushCommits mocks base method.
func (m *MockAzDOGitClient) GetPushCommits(arg0 context.Context, arg1 git.GetPushCommitsArgs) (*[]git.GitCommitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushCommits", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitCommitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushCommits indicates an expected call of GetPushCommits.
func (mr *MockAzDOGitClientMockRecorder) GetPushCommits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushCommits", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPushCommits), arg0, arg1)
}

// GetPushes mocks base method.
func (m *MockAzDOGitClient) GetPushes(arg0 context.Context, arg1 git.GetPushesArgs) (*[]git.GitPush, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushes", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushes indicates an expected call of GetPushes.
func (mr *MockAzDOGitClientMockRecorder) GetPushes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushes", reflect.TypeOf((*MockAzDOGitClient)(nil).GetPushes), arg0, arg1)
}

// GetRecycleBinRepositories mocks base method.
func (m *MockAzDOGitClient) GetRecycleBinRepositories(arg0 context.Context, arg1 git.GetRecycleBinRepositoriesArgs) (*[]git.GitDeletedRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycleBinRepositories", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitDeletedRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycleBinRepositories indicates an expected call of GetRecycleBinRepositories.
func (mr *MockAzDOGitClientMockRecorder) GetRecycleBinRepositories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycleBinRepositories", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRecycleBinRepositories), arg0, arg1)
}

// GetRefFavorite mocks base method.
func (m *MockAzDOGitClient) GetRefFavorite(arg0 context.Context, arg1 git.GetRefFavoriteArgs) (*git.GitRefFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefFavorite", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRefFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefFavorite indicates an expected call of GetRefFavorite.
func (mr *MockAzDOGitClientMockRecorder) GetRefFavorite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefFavorite", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRefFavorite), arg0, arg1)
}

// GetRefFavorites mocks base method.
func (m *MockAzDOGitClient) GetRefFavorites(arg0 context.Context, arg1 git.GetRefFavoritesArgs) (*[]git.GitRefFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefFavorites", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitRefFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefFavorites indicates an expected call of GetRefFavorites.
func (mr *MockAzDOGitClientMockRecorder) GetRefFavorites(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefFavorites", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRefFavorites), arg0, arg1)
}

// GetRefs mocks base method.
func (m *MockAzDOGitClient) GetRefs(arg0 context.Context, arg1 git.GetRefsArgs) (*git.GetRefsResponseValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefs", arg0, arg1)
	ret0, _ := ret[0].(*git.GetRefsResponseValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefs indicates an expected call of GetRefs.
func (mr *MockAzDOGitClientMockRecorder) GetRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefs", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRefs), arg0, arg1)
}

// GetRepositories mocks base method.
func (m *MockAzDOGitClient) GetRepositories(arg0 context.Context, arg1 git.GetRepositoriesArgs) (*[]git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockAzDOGitClientMockRecorder) GetRepositories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRepositories), arg0, arg1)
}

// GetRepository mocks base method.
func (m *MockAzDOGitClient) GetRepository(arg0 context.Context, arg1 git.GetRepositoryArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockAzDOGitClientMockRecorder) GetRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRepository), arg0, arg1)
}

// GetRepositoryWithParent mocks base method.
func (m *MockAzDOGitClient) GetRepositoryWithParent(arg0 context.Context, arg1 git.GetRepositoryWithParentArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryWithParent", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryWithParent indicates an expected call of GetRepositoryWithParent.
func (mr *MockAzDOGitClientMockRecorder) GetRepositoryWithParent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryWithParent", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRepositoryWithParent), arg0, arg1)
}

// GetRevert mocks base method.
func (m *MockAzDOGitClient) GetRevert(arg0 context.Context, arg1 git.GetRevertArgs) (*git.GitRevert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevert", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRevert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevert indicates an expected call of GetRevert.
func (mr *MockAzDOGitClientMockRecorder) GetRevert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevert", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRevert), arg0, arg1)
}

// GetRevertForRefName mocks base method.
func (m *MockAzDOGitClient) GetRevertForRefName(arg0 context.Context, arg1 git.GetRevertForRefNameArgs) (*git.GitRevert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevertForRefName", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRevert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevertForRefName indicates an expected call of GetRevertForRefName.
func (mr *MockAzDOGitClientMockRecorder) GetRevertForRefName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevertForRefName", reflect.TypeOf((*MockAzDOGitClient)(nil).GetRevertForRefName), arg0, arg1)
}

// GetStatuses mocks base method.
func (m *MockAzDOGitClient) GetStatuses(arg0 context.Context, arg1 git.GetStatusesArgs) (*[]git.GitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockAzDOGitClientMockRecorder) GetStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*MockAzDOGitClient)(nil).GetStatuses), arg0, arg1)
}

// GetSuggestions mocks base method.
func (m *MockAzDOGitClient) GetSuggestions(arg0 context.Context, arg1 git.GetSuggestionsArgs) (*[]git.GitSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestions", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions.
func (mr *MockAzDOGitClientMockRecorder) GetSuggestions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockAzDOGitClient)(nil).GetSuggestions), arg0, arg1)
}

// GetThreads mocks base method.
func (m *MockAzDOGitClient) GetThreads(arg0 context.Context, arg1 git.GetThreadsArgs) (*[]git.GitPullRequestCommentThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreads", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitPullRequestCommentThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreads indicates an expected call of GetThreads.
func (mr *MockAzDOGitClientMockRecorder) GetThreads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreads", reflect.TypeOf((*MockAzDOGitClient)(nil).GetThreads), arg0, arg1)
}

// GetTree mocks base method.
func (m *MockAzDOGitClient) GetTree(arg0 context.Context, arg1 git.GetTreeArgs) (*git.GitTreeRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", arg0, arg1)
	ret0, _ := ret[0].(*git.GitTreeRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree.
func (mr *MockAzDOGitClientMockRecorder) GetTree(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockAzDOGitClient)(nil).GetTree), arg0, arg1)
}

// GetTreeZip mocks base method.
func (m *MockAzDOGitClient) GetTreeZip(arg0 context.Context, arg1 git.GetTreeZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreeZip indicates an expected call of GetTreeZip.
func (mr *MockAzDOGitClientMockRecorder) GetTreeZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeZip", reflect.TypeOf((*MockAzDOGitClient)(nil).GetTreeZip), arg0, arg1)
}

// QueryImportRequests mocks base method.
func (m *MockAzDOGitClient) QueryImportRequests(arg0 context.Context, arg1 git.QueryImportRequestsArgs) (*[]git.GitImportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryImportRequests", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitImportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryImportRequests indicates an expected call of QueryImportRequests.
func (mr *MockAzDOGitClientMockRecorder) QueryImportRequests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryImportRequests", reflect.TypeOf((*MockAzDOGitClient)(nil).QueryImportRequests), arg0, arg1)
}

// RestoreRepositoryFromRecycleBin mocks base method.
func (m *MockAzDOGitClient) RestoreRepositoryFromRecycleBin(arg0 context.Context, arg1 git.RestoreRepositoryFromRecycleBinArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreRepositoryFromRecycleBin", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreRepositoryFromRecycleBin indicates an expected call of RestoreRepositoryFromRecycleBin.
func (mr *MockAzDOGitClientMockRecorder) RestoreRepositoryFromRecycleBin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreRepositoryFromRecycleBin", reflect.TypeOf((*MockAzDOGitClient)(nil).RestoreRepositoryFromRecycleBin), arg0, arg1)
}

// SharePullRequest mocks base method.
func (m *MockAzDOGitClient) SharePullRequest(arg0 context.Context, arg1 git.SharePullRequestArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharePullRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SharePullRequest indicates an expected call of SharePullRequest.
func (mr *MockAzDOGitClientMockRecorder) SharePullRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharePullRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).SharePullRequest), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockAzDOGitClient) UpdateComment(arg0 context.Context, arg1 git.UpdateCommentArgs) (*git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockAzDOGitClientMockRecorder) UpdateComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateComment), arg0, arg1)
}

// UpdateImportRequest mocks base method.
func (m *MockAzDOGitClient) UpdateImportRequest(arg0 context.Context, arg1 git.UpdateImportRequestArgs) (*git.GitImportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImportRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitImportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImportRequest indicates an expected call of UpdateImportRequest.
func (mr *MockAzDOGitClientMockRecorder) UpdateImportRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImportRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateImportRequest), arg0, arg1)
}

// UpdatePullRequest mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequest(arg0 context.Context, arg1 git.UpdatePullRequestArgs) (*git.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequest indicates an expected call of UpdatePullRequest.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequest", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequest), arg0, arg1)
}

// UpdatePullRequestIterationStatuses mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequestIterationStatuses(arg0 context.Context, arg1 git.UpdatePullRequestIterationStatusesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestIterationStatuses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestIterationStatuses indicates an expected call of UpdatePullRequestIterationStatuses.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequestIterationStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestIterationStatuses", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequestIterationStatuses), arg0, arg1)
}

// UpdatePullRequestProperties mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequestProperties(arg0 context.Context, arg1 git.UpdatePullRequestPropertiesArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestProperties", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestProperties indicates an expected call of UpdatePullRequestProperties.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequestProperties(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestProperties", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequestProperties), arg0, arg1)
}

// UpdatePullRequestReviewer mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequestReviewer(arg0 context.Context, arg1 git.UpdatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestReviewer", arg0, arg1)
	ret0, _ := ret[0].(*git.IdentityRefWithVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestReviewer indicates an expected call of UpdatePullRequestReviewer.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequestReviewer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestReviewer", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequestReviewer), arg0, arg1)
}

// UpdatePullRequestReviewers mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequestReviewers(arg0 context.Context, arg1 git.UpdatePullRequestReviewersArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestReviewers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestReviewers indicates an expected call of UpdatePullRequestReviewers.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequestReviewers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestReviewers", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequestReviewers), arg0, arg1)
}

// UpdatePullRequestStatuses mocks base method.
func (m *MockAzDOGitClient) UpdatePullRequestStatuses(arg0 context.Context, arg1 git.UpdatePullRequestStatusesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestStatuses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestStatuses indicates an expected call of UpdatePullRequestStatuses.
func (mr *MockAzDOGitClientMockRecorder) UpdatePullRequestStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestStatuses", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdatePullRequestStatuses), arg0, arg1)
}

// UpdateRef mocks base method.
func (m *MockAzDOGitClient) UpdateRef(arg0 context.Context, arg1 git.UpdateRefArgs) (*git.GitRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRef", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRef indicates an expected call of UpdateRef.
func (mr *MockAzDOGitClientMockRecorder) UpdateRef(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRef", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateRef), arg0, arg1)
}

// UpdateRefs mocks base method.
func (m *MockAzDOGitClient) UpdateRefs(arg0 context.Context, arg1 git.UpdateRefsArgs) (*[]git.GitRefUpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefs", arg0, arg1)
	ret0, _ := ret[0].(*[]git.GitRefUpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefs indicates an expected call of UpdateRefs.
func (mr *MockAzDOGitClientMockRecorder) UpdateRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefs", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateRefs), arg0, arg1)
}

// UpdateRepository mocks base method.
func (m *MockAzDOGitClient) UpdateRepository(arg0 context.Context, arg1 git.UpdateRepositoryArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockAzDOGitClientMockRecorder) UpdateRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateRepository), arg0, arg1)
}

// UpdateThread mocks base method.
func (m *MockAzDOGitClient) UpdateThread(arg0 context.Context, arg1 git.UpdateThreadArgs) (*git.GitPullRequestCommentThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThread", arg0, arg1)
	ret0, _ := ret[0].(*git.GitPullRequestCommentThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThread indicates an expected call of UpdateThread.
func (mr *MockAzDOGitClientMockRecorder) UpdateThread(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThread", reflect.TypeOf((*MockAzDOGitClient)(nil).UpdateThread), arg0, arg1)
}
