// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/auth_config.go
//
// Generated by this command:
//
//	mockgen -source internal/config/auth_config.go -mock_names Client=MockAuthConfig -package=mocks -destination internal/mocks/auth_config.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthConfig is a mock of AuthConfig interface.
type MockAuthConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigMockRecorder
	isgomock struct{}
}

// MockAuthConfigMockRecorder is the mock recorder for MockAuthConfig.
type MockAuthConfigMockRecorder struct {
	mock *MockAuthConfig
}

// NewMockAuthConfig creates a new mock instance.
func NewMockAuthConfig(ctrl *gomock.Controller) *MockAuthConfig {
	mock := &MockAuthConfig{ctrl: ctrl}
	mock.recorder = &MockAuthConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfig) EXPECT() *MockAuthConfigMockRecorder {
	return m.recorder
}

// GetDefaultOrganization mocks base method.
func (m *MockAuthConfig) GetDefaultOrganization() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOrganization")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOrganization indicates an expected call of GetDefaultOrganization.
func (mr *MockAuthConfigMockRecorder) GetDefaultOrganization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOrganization", reflect.TypeOf((*MockAuthConfig)(nil).GetDefaultOrganization))
}

// GetGitProtocol mocks base method.
func (m *MockAuthConfig) GetGitProtocol(organizationName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitProtocol", organizationName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitProtocol indicates an expected call of GetGitProtocol.
func (mr *MockAuthConfigMockRecorder) GetGitProtocol(organizationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitProtocol", reflect.TypeOf((*MockAuthConfig)(nil).GetGitProtocol), organizationName)
}

// GetOrganizations mocks base method.
func (m *MockAuthConfig) GetOrganizations() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockAuthConfigMockRecorder) GetOrganizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockAuthConfig)(nil).GetOrganizations))
}

// GetToken mocks base method.
func (m *MockAuthConfig) GetToken(organizationName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", organizationName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAuthConfigMockRecorder) GetToken(organizationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuthConfig)(nil).GetToken), organizationName)
}

// GetURL mocks base method.
func (m *MockAuthConfig) GetURL(organizationName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", organizationName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockAuthConfigMockRecorder) GetURL(organizationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockAuthConfig)(nil).GetURL), organizationName)
}

// Login mocks base method.
func (m *MockAuthConfig) Login(organizationName, organizationURL, token, gitProtocol string, secureStorage bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", organizationName, organizationURL, token, gitProtocol, secureStorage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthConfigMockRecorder) Login(organizationName, organizationURL, token, gitProtocol, secureStorage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthConfig)(nil).Login), organizationName, organizationURL, token, gitProtocol, secureStorage)
}

// Logout mocks base method.
func (m *MockAuthConfig) Logout(organizationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", organizationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthConfigMockRecorder) Logout(organizationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthConfig)(nil).Logout), organizationName)
}

// SetDefaultOrganization mocks base method.
func (m *MockAuthConfig) SetDefaultOrganization(organizationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultOrganization", organizationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultOrganization indicates an expected call of SetDefaultOrganization.
func (mr *MockAuthConfigMockRecorder) SetDefaultOrganization(organizationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultOrganization", reflect.TypeOf((*MockAuthConfig)(nil).SetDefaultOrganization), organizationName)
}
