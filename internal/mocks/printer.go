// Code generated by MockGen. DO NOT EDIT.
// Source: internal/printer/printer.go
//
// Generated by this command:
//
//	mockgen -source internal/printer/printer.go -mock_names Client=MockPrinter -package=mocks -destination internal/mocks/printer.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	printer "github.com/tmeckel/azdo-cli/internal/printer"
	gomock "go.uber.org/mock/gomock"
)

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
	isgomock struct{}
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// AddColumns mocks base method.
func (m *MockPrinter) AddColumns(columns ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddColumns", varargs...)
}

// AddColumns indicates an expected call of AddColumns.
func (mr *MockPrinterMockRecorder) AddColumns(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColumns", reflect.TypeOf((*MockPrinter)(nil).AddColumns), columns...)
}

// AddField mocks base method.
func (m *MockPrinter) AddField(arg0 string, arg1 ...printer.FieldOption) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddField", varargs...)
}

// AddField indicates an expected call of AddField.
func (mr *MockPrinterMockRecorder) AddField(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddField", reflect.TypeOf((*MockPrinter)(nil).AddField), varargs...)
}

// AddTimeField mocks base method.
func (m *MockPrinter) AddTimeField(now, t time.Time, c func(string) string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTimeField", now, t, c)
}

// AddTimeField indicates an expected call of AddTimeField.
func (mr *MockPrinterMockRecorder) AddTimeField(now, t, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeField", reflect.TypeOf((*MockPrinter)(nil).AddTimeField), now, t, c)
}

// EndRow mocks base method.
func (m *MockPrinter) EndRow() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndRow")
}

// EndRow indicates an expected call of EndRow.
func (mr *MockPrinterMockRecorder) EndRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndRow", reflect.TypeOf((*MockPrinter)(nil).EndRow))
}

// Render mocks base method.
func (m *MockPrinter) Render() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render")
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockPrinterMockRecorder) Render() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockPrinter)(nil).Render))
}
