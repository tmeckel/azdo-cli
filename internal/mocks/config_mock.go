// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/config.go
//
// Generated by this command:
//
//	mockgen -source internal/config/config.go -mock_names Client=MockConfig -package=mocks -destination internal/mocks/config_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/tmeckel/azdo-cli/internal/config"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Aliases mocks base method.
func (m *MockConfig) Aliases() config.AliasConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aliases")
	ret0, _ := ret[0].(config.AliasConfig)
	return ret0
}

// Aliases indicates an expected call of Aliases.
func (mr *MockConfigMockRecorder) Aliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aliases", reflect.TypeOf((*MockConfig)(nil).Aliases))
}

// Authentication mocks base method.
func (m *MockConfig) Authentication() config.AuthConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication")
	ret0, _ := ret[0].(config.AuthConfig)
	return ret0
}

// Authentication indicates an expected call of Authentication.
func (mr *MockConfigMockRecorder) Authentication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockConfig)(nil).Authentication))
}

// Get mocks base method.
func (m *MockConfig) Get(arg0 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfig)(nil).Get), arg0)
}

// GetOrDefault mocks base method.
func (m *MockConfig) GetOrDefault(arg0 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrDefault", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrDefault indicates an expected call of GetOrDefault.
func (mr *MockConfigMockRecorder) GetOrDefault(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrDefault", reflect.TypeOf((*MockConfig)(nil).GetOrDefault), arg0)
}

// Keys mocks base method.
func (m *MockConfig) Keys(arg0 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockConfigMockRecorder) Keys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockConfig)(nil).Keys), arg0)
}

// Remove mocks base method.
func (m *MockConfig) Remove(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockConfigMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockConfig)(nil).Remove), arg0)
}

// Set mocks base method.
func (m *MockConfig) Set(arg0 []string, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockConfigMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfig)(nil).Set), arg0, arg1)
}

// Write mocks base method.
func (m *MockConfig) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockConfigMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConfig)(nil).Write))
}
