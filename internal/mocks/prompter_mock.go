// Code generated by MockGen. DO NOT EDIT.
// Source: internal/prompter/prompter.go
//
// Generated by this command:
//
//	mockgen -source internal/prompter/prompter.go -package=mocks -destination internal/mocks/prompter_mock.go -mock_names Prompter=MockPrompter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
	isgomock struct{}
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// AuthToken mocks base method.
func (m *MockPrompter) AuthToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthToken indicates an expected call of AuthToken.
func (mr *MockPrompterMockRecorder) AuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthToken", reflect.TypeOf((*MockPrompter)(nil).AuthToken))
}

// Confirm mocks base method.
func (m *MockPrompter) Confirm(arg0 string, arg1 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockPrompterMockRecorder) Confirm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPrompter)(nil).Confirm), arg0, arg1)
}

// ConfirmDeletion mocks base method.
func (m *MockPrompter) ConfirmDeletion(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmDeletion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmDeletion indicates an expected call of ConfirmDeletion.
func (mr *MockPrompterMockRecorder) ConfirmDeletion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDeletion", reflect.TypeOf((*MockPrompter)(nil).ConfirmDeletion), arg0)
}

// Input mocks base method.
func (m *MockPrompter) Input(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input.
func (mr *MockPrompterMockRecorder) Input(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockPrompter)(nil).Input), arg0, arg1)
}

// InputOrganizationName mocks base method.
func (m *MockPrompter) InputOrganizationName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputOrganizationName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputOrganizationName indicates an expected call of InputOrganizationName.
func (mr *MockPrompterMockRecorder) InputOrganizationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputOrganizationName", reflect.TypeOf((*MockPrompter)(nil).InputOrganizationName))
}

// MultiSelect mocks base method.
func (m *MockPrompter) MultiSelect(arg0 string, arg1, arg2 []string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSelect", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSelect indicates an expected call of MultiSelect.
func (mr *MockPrompterMockRecorder) MultiSelect(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSelect", reflect.TypeOf((*MockPrompter)(nil).MultiSelect), arg0, arg1, arg2)
}

// Password mocks base method.
func (m *MockPrompter) Password(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Password indicates an expected call of Password.
func (mr *MockPrompterMockRecorder) Password(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockPrompter)(nil).Password), arg0)
}

// Select mocks base method.
func (m *MockPrompter) Select(arg0, arg1 string, arg2 []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockPrompterMockRecorder) Select(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPrompter)(nil).Select), arg0, arg1, arg2)
}

// MockfileWriter is a mock of fileWriter interface.
type MockfileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockfileWriterMockRecorder
	isgomock struct{}
}

// MockfileWriterMockRecorder is the mock recorder for MockfileWriter.
type MockfileWriterMockRecorder struct {
	mock *MockfileWriter
}

// NewMockfileWriter creates a new mock instance.
func NewMockfileWriter(ctrl *gomock.Controller) *MockfileWriter {
	mock := &MockfileWriter{ctrl: ctrl}
	mock.recorder = &MockfileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileWriter) EXPECT() *MockfileWriterMockRecorder {
	return m.recorder
}

// Fd mocks base method.
func (m *MockfileWriter) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockfileWriterMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockfileWriter)(nil).Fd))
}

// Write mocks base method.
func (m *MockfileWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockfileWriterMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockfileWriter)(nil).Write), p)
}

// MockfileReader is a mock of fileReader interface.
type MockfileReader struct {
	ctrl     *gomock.Controller
	recorder *MockfileReaderMockRecorder
	isgomock struct{}
}

// MockfileReaderMockRecorder is the mock recorder for MockfileReader.
type MockfileReaderMockRecorder struct {
	mock *MockfileReader
}

// NewMockfileReader creates a new mock instance.
func NewMockfileReader(ctrl *gomock.Controller) *MockfileReader {
	mock := &MockfileReader{ctrl: ctrl}
	mock.recorder = &MockfileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileReader) EXPECT() *MockfileReaderMockRecorder {
	return m.recorder
}

// Fd mocks base method.
func (m *MockfileReader) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockfileReaderMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockfileReader)(nil).Fd))
}

// Read mocks base method.
func (m *MockfileReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockfileReaderMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockfileReader)(nil).Read), p)
}
