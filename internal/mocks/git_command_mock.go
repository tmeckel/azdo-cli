// Code generated by MockGen. DO NOT EDIT.
// Source: internal/git/client.go
//
// Generated by this command:
//
//	mockgen -source internal/git/client.go -package=mocks -destination internal/mocks/git_command_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/tmeckel/azdo-cli/internal/git"
	gomock "go.uber.org/mock/gomock"
)

// MockerrWithExitCode is a mock of errWithExitCode interface.
type MockerrWithExitCode struct {
	ctrl     *gomock.Controller
	recorder *MockerrWithExitCodeMockRecorder
	isgomock struct{}
}

// MockerrWithExitCodeMockRecorder is the mock recorder for MockerrWithExitCode.
type MockerrWithExitCodeMockRecorder struct {
	mock *MockerrWithExitCode
}

// NewMockerrWithExitCode creates a new mock instance.
func NewMockerrWithExitCode(ctrl *gomock.Controller) *MockerrWithExitCode {
	mock := &MockerrWithExitCode{ctrl: ctrl}
	mock.recorder = &MockerrWithExitCodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrWithExitCode) EXPECT() *MockerrWithExitCodeMockRecorder {
	return m.recorder
}

// ExitCode mocks base method.
func (m *MockerrWithExitCode) ExitCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ExitCode indicates an expected call of ExitCode.
func (mr *MockerrWithExitCodeMockRecorder) ExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitCode", reflect.TypeOf((*MockerrWithExitCode)(nil).ExitCode))
}

// MockGitCommand is a mock of GitCommand interface.
type MockGitCommand struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommandMockRecorder
	isgomock struct{}
}

// MockGitCommandMockRecorder is the mock recorder for MockGitCommand.
type MockGitCommandMockRecorder struct {
	mock *MockGitCommand
}

// NewMockGitCommand creates a new mock instance.
func NewMockGitCommand(ctrl *gomock.Controller) *MockGitCommand {
	mock := &MockGitCommand{ctrl: ctrl}
	mock.recorder = &MockGitCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommand) EXPECT() *MockGitCommandMockRecorder {
	return m.recorder
}

// AddRemote mocks base method.
func (m *MockGitCommand) AddRemote(ctx context.Context, name, urlStr string, trackingBranches []string) (*git.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemote", ctx, name, urlStr, trackingBranches)
	ret0, _ := ret[0].(*git.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRemote indicates an expected call of AddRemote.
func (mr *MockGitCommandMockRecorder) AddRemote(ctx, name, urlStr, trackingBranches any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemote", reflect.TypeOf((*MockGitCommand)(nil).AddRemote), ctx, name, urlStr, trackingBranches)
}

// AuthenticatedCommand mocks base method.
func (m *MockGitCommand) AuthenticatedCommand(ctx context.Context, args ...string) (*git.Command, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticatedCommand", varargs...)
	ret0, _ := ret[0].(*git.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticatedCommand indicates an expected call of AuthenticatedCommand.
func (mr *MockGitCommandMockRecorder) AuthenticatedCommand(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticatedCommand", reflect.TypeOf((*MockGitCommand)(nil).AuthenticatedCommand), varargs...)
}

// CheckoutBranch mocks base method.
func (m *MockGitCommand) CheckoutBranch(ctx context.Context, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", ctx, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockGitCommandMockRecorder) CheckoutBranch(ctx, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockGitCommand)(nil).CheckoutBranch), ctx, branch)
}

// CheckoutNewBranch mocks base method.
func (m *MockGitCommand) CheckoutNewBranch(ctx context.Context, remoteName, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutNewBranch", ctx, remoteName, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutNewBranch indicates an expected call of CheckoutNewBranch.
func (mr *MockGitCommandMockRecorder) CheckoutNewBranch(ctx, remoteName, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutNewBranch", reflect.TypeOf((*MockGitCommand)(nil).CheckoutNewBranch), ctx, remoteName, branch)
}

// Clone mocks base method.
func (m *MockGitCommand) Clone(ctx context.Context, cloneURL string, args []string, mods ...git.CommandModifier) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, cloneURL, args}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clone", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitCommandMockRecorder) Clone(ctx, cloneURL, args any, mods ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, cloneURL, args}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitCommand)(nil).Clone), varargs...)
}

// Command mocks base method.
func (m *MockGitCommand) Command(ctx context.Context, args ...string) (*git.Command, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(*git.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockGitCommandMockRecorder) Command(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockGitCommand)(nil).Command), varargs...)
}

// CommitBody mocks base method.
func (m *MockGitCommand) CommitBody(ctx context.Context, sha string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBody", ctx, sha)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitBody indicates an expected call of CommitBody.
func (mr *MockGitCommandMockRecorder) CommitBody(ctx, sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBody", reflect.TypeOf((*MockGitCommand)(nil).CommitBody), ctx, sha)
}

// Commits mocks base method.
func (m *MockGitCommand) Commits(ctx context.Context, baseRef, headRef string) ([]*git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commits", ctx, baseRef, headRef)
	ret0, _ := ret[0].([]*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commits indicates an expected call of Commits.
func (mr *MockGitCommandMockRecorder) Commits(ctx, baseRef, headRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commits", reflect.TypeOf((*MockGitCommand)(nil).Commits), ctx, baseRef, headRef)
}

// CurrentBranch mocks base method.
func (m *MockGitCommand) CurrentBranch(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBranch indicates an expected call of CurrentBranch.
func (mr *MockGitCommandMockRecorder) CurrentBranch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockGitCommand)(nil).CurrentBranch), ctx)
}

// DeleteLocalBranch mocks base method.
func (m *MockGitCommand) DeleteLocalBranch(ctx context.Context, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalBranch", ctx, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalBranch indicates an expected call of DeleteLocalBranch.
func (mr *MockGitCommandMockRecorder) DeleteLocalBranch(ctx, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalBranch", reflect.TypeOf((*MockGitCommand)(nil).DeleteLocalBranch), ctx, branch)
}

// DeleteLocalTag mocks base method.
func (m *MockGitCommand) DeleteLocalTag(ctx context.Context, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalTag", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalTag indicates an expected call of DeleteLocalTag.
func (mr *MockGitCommandMockRecorder) DeleteLocalTag(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalTag", reflect.TypeOf((*MockGitCommand)(nil).DeleteLocalTag), ctx, tag)
}

// Fetch mocks base method.
func (m *MockGitCommand) Fetch(ctx context.Context, remote, refspec string, mods ...git.CommandModifier) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, remote, refspec}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockGitCommandMockRecorder) Fetch(ctx, remote, refspec any, mods ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, remote, refspec}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockGitCommand)(nil).Fetch), varargs...)
}

// GetAuthConfig mocks base method.
func (m *MockGitCommand) GetAuthConfig(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthConfig", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthConfig indicates an expected call of GetAuthConfig.
func (mr *MockGitCommandMockRecorder) GetAuthConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthConfig", reflect.TypeOf((*MockGitCommand)(nil).GetAuthConfig), ctx)
}

// GetAzDoPath mocks base method.
func (m *MockGitCommand) GetAzDoPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzDoPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAzDoPath indicates an expected call of GetAzDoPath.
func (mr *MockGitCommandMockRecorder) GetAzDoPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzDoPath", reflect.TypeOf((*MockGitCommand)(nil).GetAzDoPath))
}

// GetConfig mocks base method.
func (m *MockGitCommand) GetConfig(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockGitCommandMockRecorder) GetConfig(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockGitCommand)(nil).GetConfig), ctx, name)
}

// GetGitPath mocks base method.
func (m *MockGitCommand) GetGitPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGitPath indicates an expected call of GetGitPath.
func (mr *MockGitCommandMockRecorder) GetGitPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitPath", reflect.TypeOf((*MockGitCommand)(nil).GetGitPath))
}

// GetRepoDir mocks base method.
func (m *MockGitCommand) GetRepoDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoDir indicates an expected call of GetRepoDir.
func (mr *MockGitCommandMockRecorder) GetRepoDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoDir", reflect.TypeOf((*MockGitCommand)(nil).GetRepoDir))
}

// GitDir mocks base method.
func (m *MockGitCommand) GitDir(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitDir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitDir indicates an expected call of GitDir.
func (mr *MockGitCommandMockRecorder) GitDir(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitDir", reflect.TypeOf((*MockGitCommand)(nil).GitDir), ctx)
}

// HasLocalBranch mocks base method.
func (m *MockGitCommand) HasLocalBranch(ctx context.Context, branch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLocalBranch", ctx, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLocalBranch indicates an expected call of HasLocalBranch.
func (mr *MockGitCommandMockRecorder) HasLocalBranch(ctx, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLocalBranch", reflect.TypeOf((*MockGitCommand)(nil).HasLocalBranch), ctx, branch)
}

// HasRemoteBranch mocks base method.
func (m *MockGitCommand) HasRemoteBranch(ctx context.Context, remote, branch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRemoteBranch", ctx, remote, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRemoteBranch indicates an expected call of HasRemoteBranch.
func (mr *MockGitCommandMockRecorder) HasRemoteBranch(ctx, remote, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRemoteBranch", reflect.TypeOf((*MockGitCommand)(nil).HasRemoteBranch), ctx, remote, branch)
}

// IsLocalGitRepo mocks base method.
func (m *MockGitCommand) IsLocalGitRepo(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocalGitRepo", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLocalGitRepo indicates an expected call of IsLocalGitRepo.
func (mr *MockGitCommandMockRecorder) IsLocalGitRepo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocalGitRepo", reflect.TypeOf((*MockGitCommand)(nil).IsLocalGitRepo), ctx)
}

// LastCommit mocks base method.
func (m *MockGitCommand) LastCommit(ctx context.Context) (*git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCommit", ctx)
	ret0, _ := ret[0].(*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCommit indicates an expected call of LastCommit.
func (mr *MockGitCommandMockRecorder) LastCommit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCommit", reflect.TypeOf((*MockGitCommand)(nil).LastCommit), ctx)
}

// ParentBranch mocks base method.
func (m *MockGitCommand) ParentBranch(ctx context.Context, branch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentBranch", ctx, branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParentBranch indicates an expected call of ParentBranch.
func (mr *MockGitCommandMockRecorder) ParentBranch(ctx, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentBranch", reflect.TypeOf((*MockGitCommand)(nil).ParentBranch), ctx, branch)
}

// PathFromRoot mocks base method.
func (m *MockGitCommand) PathFromRoot(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathFromRoot", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// PathFromRoot indicates an expected call of PathFromRoot.
func (mr *MockGitCommandMockRecorder) PathFromRoot(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathFromRoot", reflect.TypeOf((*MockGitCommand)(nil).PathFromRoot), ctx)
}

// Pull mocks base method.
func (m *MockGitCommand) Pull(ctx context.Context, remote, branch string, mods ...git.CommandModifier) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, remote, branch}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockGitCommandMockRecorder) Pull(ctx, remote, branch any, mods ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, remote, branch}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitCommand)(nil).Pull), varargs...)
}

// Push mocks base method.
func (m *MockGitCommand) Push(ctx context.Context, remote, ref string, mods ...git.CommandModifier) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, remote, ref}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitCommandMockRecorder) Push(ctx, remote, ref any, mods ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, remote, ref}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitCommand)(nil).Push), varargs...)
}

// ReadBranchConfig mocks base method.
func (m *MockGitCommand) ReadBranchConfig(ctx context.Context, branch string) git.BranchConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBranchConfig", ctx, branch)
	ret0, _ := ret[0].(git.BranchConfig)
	return ret0
}

// ReadBranchConfig indicates an expected call of ReadBranchConfig.
func (mr *MockGitCommandMockRecorder) ReadBranchConfig(ctx, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBranchConfig", reflect.TypeOf((*MockGitCommand)(nil).ReadBranchConfig), ctx, branch)
}

// Remotes mocks base method.
func (m *MockGitCommand) Remotes(ctx context.Context) (git.RemoteSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remotes", ctx)
	ret0, _ := ret[0].(git.RemoteSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remotes indicates an expected call of Remotes.
func (mr *MockGitCommandMockRecorder) Remotes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remotes", reflect.TypeOf((*MockGitCommand)(nil).Remotes), ctx)
}

// SetConfig mocks base method.
func (m *MockGitCommand) SetConfig(ctx context.Context, configItems ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range configItems {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockGitCommandMockRecorder) SetConfig(ctx any, configItems ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, configItems...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockGitCommand)(nil).SetConfig), varargs...)
}

// SetRemoteBranches mocks base method.
func (m *MockGitCommand) SetRemoteBranches(ctx context.Context, remote, refspec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteBranches", ctx, remote, refspec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteBranches indicates an expected call of SetRemoteBranches.
func (mr *MockGitCommandMockRecorder) SetRemoteBranches(ctx, remote, refspec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteBranches", reflect.TypeOf((*MockGitCommand)(nil).SetRemoteBranches), ctx, remote, refspec)
}

// SetRemoteResolution mocks base method.
func (m *MockGitCommand) SetRemoteResolution(ctx context.Context, name, resolution string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteResolution", ctx, name, resolution)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteResolution indicates an expected call of SetRemoteResolution.
func (mr *MockGitCommandMockRecorder) SetRemoteResolution(ctx, name, resolution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteResolution", reflect.TypeOf((*MockGitCommand)(nil).SetRemoteResolution), ctx, name, resolution)
}

// SetRepoDir mocks base method.
func (m *MockGitCommand) SetRepoDir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepoDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRepoDir indicates an expected call of SetRepoDir.
func (mr *MockGitCommandMockRecorder) SetRepoDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepoDir", reflect.TypeOf((*MockGitCommand)(nil).SetRepoDir), arg0)
}

// ShowRefs mocks base method.
func (m *MockGitCommand) ShowRefs(ctx context.Context, refs []string) ([]git.Ref, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowRefs", ctx, refs)
	ret0, _ := ret[0].([]git.Ref)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowRefs indicates an expected call of ShowRefs.
func (mr *MockGitCommandMockRecorder) ShowRefs(ctx, refs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowRefs", reflect.TypeOf((*MockGitCommand)(nil).ShowRefs), ctx, refs)
}

// ToplevelDir mocks base method.
func (m *MockGitCommand) ToplevelDir(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToplevelDir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToplevelDir indicates an expected call of ToplevelDir.
func (mr *MockGitCommandMockRecorder) ToplevelDir(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToplevelDir", reflect.TypeOf((*MockGitCommand)(nil).ToplevelDir), ctx)
}

// TrackingBranchNames mocks base method.
func (m *MockGitCommand) TrackingBranchNames(ctx context.Context, prefix string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackingBranchNames", ctx, prefix)
	ret0, _ := ret[0].([]string)
	return ret0
}

// TrackingBranchNames indicates an expected call of TrackingBranchNames.
func (mr *MockGitCommandMockRecorder) TrackingBranchNames(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackingBranchNames", reflect.TypeOf((*MockGitCommand)(nil).TrackingBranchNames), ctx, prefix)
}

// UncommittedChangeCount mocks base method.
func (m *MockGitCommand) UncommittedChangeCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UncommittedChangeCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UncommittedChangeCount indicates an expected call of UncommittedChangeCount.
func (mr *MockGitCommandMockRecorder) UncommittedChangeCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncommittedChangeCount", reflect.TypeOf((*MockGitCommand)(nil).UncommittedChangeCount), ctx)
}

// UnsetRemoteResolution mocks base method.
func (m *MockGitCommand) UnsetRemoteResolution(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetRemoteResolution", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetRemoteResolution indicates an expected call of UnsetRemoteResolution.
func (mr *MockGitCommandMockRecorder) UnsetRemoteResolution(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetRemoteResolution", reflect.TypeOf((*MockGitCommand)(nil).UnsetRemoteResolution), ctx, name)
}

// UpdateRemoteURL mocks base method.
func (m *MockGitCommand) UpdateRemoteURL(ctx context.Context, name, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteURL", ctx, name, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteURL indicates an expected call of UpdateRemoteURL.
func (mr *MockGitCommandMockRecorder) UpdateRemoteURL(ctx, name, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteURL", reflect.TypeOf((*MockGitCommand)(nil).UpdateRemoteURL), ctx, name, url)
}
