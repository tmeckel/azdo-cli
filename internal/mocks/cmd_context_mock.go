// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cmd/util/cmd_context.go
//
// Generated by this command:
//
//	mockgen -source internal/cmd/util/cmd_context.go -package=mocks -destination internal/mocks/cmd_context_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"
	azdo "github.com/tmeckel/azdo-cli/internal/azdo"
	util "github.com/tmeckel/azdo-cli/internal/cmd/util"
	config "github.com/tmeckel/azdo-cli/internal/config"
	git0 "github.com/tmeckel/azdo-cli/internal/git"
	iostreams "github.com/tmeckel/azdo-cli/internal/iostreams"
	printer "github.com/tmeckel/azdo-cli/internal/printer"
	prompter "github.com/tmeckel/azdo-cli/internal/prompter"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoContext is a mock of RepoContext interface.
type MockRepoContext struct {
	ctrl     *gomock.Controller
	recorder *MockRepoContextMockRecorder
	isgomock struct{}
}

// MockRepoContextMockRecorder is the mock recorder for MockRepoContext.
type MockRepoContextMockRecorder struct {
	mock *MockRepoContext
}

// NewMockRepoContext creates a new mock instance.
func NewMockRepoContext(ctrl *gomock.Controller) *MockRepoContext {
	mock := &MockRepoContext{ctrl: ctrl}
	mock.recorder = &MockRepoContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoContext) EXPECT() *MockRepoContextMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRepoContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRepoContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRepoContext)(nil).Context))
}

// GitClient mocks base method.
func (m *MockRepoContext) GitClient() (git.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitClient")
	ret0, _ := ret[0].(git.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitClient indicates an expected call of GitClient.
func (mr *MockRepoContextMockRecorder) GitClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitClient", reflect.TypeOf((*MockRepoContext)(nil).GitClient))
}

// GitCommand mocks base method.
func (m *MockRepoContext) GitCommand() (git0.GitCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitCommand")
	ret0, _ := ret[0].(git0.GitCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitCommand indicates an expected call of GitCommand.
func (mr *MockRepoContextMockRecorder) GitCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitCommand", reflect.TypeOf((*MockRepoContext)(nil).GitCommand))
}

// GitRepository mocks base method.
func (m *MockRepoContext) GitRepository() (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepository")
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitRepository indicates an expected call of GitRepository.
func (mr *MockRepoContextMockRecorder) GitRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepository", reflect.TypeOf((*MockRepoContext)(nil).GitRepository))
}

// Remote mocks base method.
func (m *MockRepoContext) Remote(arg0 *git.GitRepository) (*azdo.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote", arg0)
	ret0, _ := ret[0].(*azdo.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remote indicates an expected call of Remote.
func (mr *MockRepoContextMockRecorder) Remote(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockRepoContext)(nil).Remote), arg0)
}

// Remotes mocks base method.
func (m *MockRepoContext) Remotes() (azdo.RemoteSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remotes")
	ret0, _ := ret[0].(azdo.RemoteSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remotes indicates an expected call of Remotes.
func (mr *MockRepoContextMockRecorder) Remotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remotes", reflect.TypeOf((*MockRepoContext)(nil).Remotes))
}

// Repo mocks base method.
func (m *MockRepoContext) Repo() (azdo.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repo")
	ret0, _ := ret[0].(azdo.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repo indicates an expected call of Repo.
func (mr *MockRepoContextMockRecorder) Repo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repo", reflect.TypeOf((*MockRepoContext)(nil).Repo))
}

// WithRepo mocks base method.
func (m *MockRepoContext) WithRepo(arg0 func() (azdo.Repository, error)) util.RepoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRepo", arg0)
	ret0, _ := ret[0].(util.RepoContext)
	return ret0
}

// WithRepo indicates an expected call of WithRepo.
func (mr *MockRepoContextMockRecorder) WithRepo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRepo", reflect.TypeOf((*MockRepoContext)(nil).WithRepo), arg0)
}

// MockCmdContext is a mock of CmdContext interface.
type MockCmdContext struct {
	ctrl     *gomock.Controller
	recorder *MockCmdContextMockRecorder
	isgomock struct{}
}

// MockCmdContextMockRecorder is the mock recorder for MockCmdContext.
type MockCmdContextMockRecorder struct {
	mock *MockCmdContext
}

// NewMockCmdContext creates a new mock instance.
func NewMockCmdContext(ctrl *gomock.Controller) *MockCmdContext {
	mock := &MockCmdContext{ctrl: ctrl}
	mock.recorder = &MockCmdContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdContext) EXPECT() *MockCmdContextMockRecorder {
	return m.recorder
}

// ClientFactory mocks base method.
func (m *MockCmdContext) ClientFactory() azdo.ClientFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientFactory")
	ret0, _ := ret[0].(azdo.ClientFactory)
	return ret0
}

// ClientFactory indicates an expected call of ClientFactory.
func (mr *MockCmdContextMockRecorder) ClientFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientFactory", reflect.TypeOf((*MockCmdContext)(nil).ClientFactory))
}

// Config mocks base method.
func (m *MockCmdContext) Config() (config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockCmdContextMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCmdContext)(nil).Config))
}

// ConnectionFactory mocks base method.
func (m *MockCmdContext) ConnectionFactory() azdo.ConnectionFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionFactory")
	ret0, _ := ret[0].(azdo.ConnectionFactory)
	return ret0
}

// ConnectionFactory indicates an expected call of ConnectionFactory.
func (mr *MockCmdContextMockRecorder) ConnectionFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionFactory", reflect.TypeOf((*MockCmdContext)(nil).ConnectionFactory))
}

// Context mocks base method.
func (m *MockCmdContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCmdContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCmdContext)(nil).Context))
}

// IOStreams mocks base method.
func (m *MockCmdContext) IOStreams() (*iostreams.IOStreams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOStreams")
	ret0, _ := ret[0].(*iostreams.IOStreams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IOStreams indicates an expected call of IOStreams.
func (mr *MockCmdContextMockRecorder) IOStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOStreams", reflect.TypeOf((*MockCmdContext)(nil).IOStreams))
}

// Printer mocks base method.
func (m *MockCmdContext) Printer(arg0 string) (printer.Printer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Printer", arg0)
	ret0, _ := ret[0].(printer.Printer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Printer indicates an expected call of Printer.
func (mr *MockCmdContextMockRecorder) Printer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printer", reflect.TypeOf((*MockCmdContext)(nil).Printer), arg0)
}

// Prompter mocks base method.
func (m *MockCmdContext) Prompter() (prompter.Prompter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompter")
	ret0, _ := ret[0].(prompter.Prompter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompter indicates an expected call of Prompter.
func (mr *MockCmdContextMockRecorder) Prompter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompter", reflect.TypeOf((*MockCmdContext)(nil).Prompter))
}

// RepoContext mocks base method.
func (m *MockCmdContext) RepoContext() util.RepoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoContext")
	ret0, _ := ret[0].(util.RepoContext)
	return ret0
}

// RepoContext indicates an expected call of RepoContext.
func (mr *MockCmdContextMockRecorder) RepoContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoContext", reflect.TypeOf((*MockCmdContext)(nil).RepoContext))
}
