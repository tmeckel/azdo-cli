// Code generated by MockGen. DO NOT EDIT.
// Source: internal/azdo/extensions/extension.go
//
// Generated by this command:
//
//	mockgen -source internal/azdo/extensions/extension.go -package=mocks -destination internal/mocks/extension_mock.go -mock_names Client=MockAzDOExtension
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	graph "github.com/microsoft/azure-devops-go-api/azuredevops/v7/graph"
	gomock "go.uber.org/mock/gomock"
)

// MockAzDOExtension is a mock of Client interface.
type MockAzDOExtension struct {
	ctrl     *gomock.Controller
	recorder *MockAzDOExtensionMockRecorder
	isgomock struct{}
}

// MockAzDOExtensionMockRecorder is the mock recorder for MockAzDOExtension.
type MockAzDOExtensionMockRecorder struct {
	mock *MockAzDOExtension
}

// NewMockAzDOExtension creates a new mock instance.
func NewMockAzDOExtension(ctrl *gomock.Controller) *MockAzDOExtension {
	mock := &MockAzDOExtension{ctrl: ctrl}
	mock.recorder = &MockAzDOExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzDOExtension) EXPECT() *MockAzDOExtensionMockRecorder {
	return m.recorder
}

// FindGroupsByDisplayName mocks base method.
func (m *MockAzDOExtension) FindGroupsByDisplayName(ctx context.Context, displayName string, scopeDescriptor *string) ([]*graph.GraphGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGroupsByDisplayName", ctx, displayName, scopeDescriptor)
	ret0, _ := ret[0].([]*graph.GraphGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGroupsByDisplayName indicates an expected call of FindGroupsByDisplayName.
func (mr *MockAzDOExtensionMockRecorder) FindGroupsByDisplayName(ctx, displayName, scopeDescriptor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroupsByDisplayName", reflect.TypeOf((*MockAzDOExtension)(nil).FindGroupsByDisplayName), ctx, displayName, scopeDescriptor)
}

// GetSelfID mocks base method.
func (m *MockAzDOExtension) GetSelfID(ctx context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfID", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelfID indicates an expected call of GetSelfID.
func (mr *MockAzDOExtensionMockRecorder) GetSelfID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfID", reflect.TypeOf((*MockAzDOExtension)(nil).GetSelfID), ctx)
}

// GetSubjectID mocks base method.
func (m *MockAzDOExtension) GetSubjectID(ctx context.Context, subject string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectID", ctx, subject)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectID indicates an expected call of GetSubjectID.
func (mr *MockAzDOExtensionMockRecorder) GetSubjectID(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectID", reflect.TypeOf((*MockAzDOExtension)(nil).GetSubjectID), ctx, subject)
}
