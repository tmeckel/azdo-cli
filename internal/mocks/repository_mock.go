// Code generated by MockGen. DO NOT EDIT.
// Source: internal/azdo/repo.go
//
// Generated by this command:
//
//	mockgen -source internal/azdo/repo.go -package=mocks -destination internal/mocks/repository_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"
	azdo "github.com/tmeckel/azdo-cli/internal/azdo"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationName is a mock of OrganizationName interface.
type MockOrganizationName struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationNameMockRecorder
	isgomock struct{}
}

// MockOrganizationNameMockRecorder is the mock recorder for MockOrganizationName.
type MockOrganizationNameMockRecorder struct {
	mock *MockOrganizationName
}

// NewMockOrganizationName creates a new mock instance.
func NewMockOrganizationName(ctrl *gomock.Controller) *MockOrganizationName {
	mock := &MockOrganizationName{ctrl: ctrl}
	mock.recorder = &MockOrganizationNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationName) EXPECT() *MockOrganizationNameMockRecorder {
	return m.recorder
}

// FullName mocks base method.
func (m *MockOrganizationName) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockOrganizationNameMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockOrganizationName)(nil).FullName))
}

// Organization mocks base method.
func (m *MockOrganizationName) Organization() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(string)
	return ret0
}

// Organization indicates an expected call of Organization.
func (mr *MockOrganizationNameMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockOrganizationName)(nil).Organization))
}

// MockProjectName is a mock of ProjectName interface.
type MockProjectName struct {
	ctrl     *gomock.Controller
	recorder *MockProjectNameMockRecorder
	isgomock struct{}
}

// MockProjectNameMockRecorder is the mock recorder for MockProjectName.
type MockProjectNameMockRecorder struct {
	mock *MockProjectName
}

// NewMockProjectName creates a new mock instance.
func NewMockProjectName(ctrl *gomock.Controller) *MockProjectName {
	mock := &MockProjectName{ctrl: ctrl}
	mock.recorder = &MockProjectNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectName) EXPECT() *MockProjectNameMockRecorder {
	return m.recorder
}

// FullName mocks base method.
func (m *MockProjectName) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockProjectNameMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockProjectName)(nil).FullName))
}

// Organization mocks base method.
func (m *MockProjectName) Organization() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(string)
	return ret0
}

// Organization indicates an expected call of Organization.
func (mr *MockProjectNameMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockProjectName)(nil).Organization))
}

// Project mocks base method.
func (m *MockProjectName) Project() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project")
	ret0, _ := ret[0].(string)
	return ret0
}

// Project indicates an expected call of Project.
func (mr *MockProjectNameMockRecorder) Project() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockProjectName)(nil).Project))
}

// MockRepositoryName is a mock of RepositoryName interface.
type MockRepositoryName struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryNameMockRecorder
	isgomock struct{}
}

// MockRepositoryNameMockRecorder is the mock recorder for MockRepositoryName.
type MockRepositoryNameMockRecorder struct {
	mock *MockRepositoryName
}

// NewMockRepositoryName creates a new mock instance.
func NewMockRepositoryName(ctrl *gomock.Controller) *MockRepositoryName {
	mock := &MockRepositoryName{ctrl: ctrl}
	mock.recorder = &MockRepositoryNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryName) EXPECT() *MockRepositoryNameMockRecorder {
	return m.recorder
}

// FullName mocks base method.
func (m *MockRepositoryName) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockRepositoryNameMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockRepositoryName)(nil).FullName))
}

// Name mocks base method.
func (m *MockRepositoryName) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRepositoryNameMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRepositoryName)(nil).Name))
}

// Organization mocks base method.
func (m *MockRepositoryName) Organization() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(string)
	return ret0
}

// Organization indicates an expected call of Organization.
func (mr *MockRepositoryNameMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockRepositoryName)(nil).Organization))
}

// Project mocks base method.
func (m *MockRepositoryName) Project() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project")
	ret0, _ := ret[0].(string)
	return ret0
}

// Project indicates an expected call of Project.
func (mr *MockRepositoryNameMockRecorder) Project() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockRepositoryName)(nil).Project))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Equals mocks base method.
func (m *MockRepository) Equals(other azdo.Repository) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockRepositoryMockRecorder) Equals(other any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockRepository)(nil).Equals), other)
}

// FullName mocks base method.
func (m *MockRepository) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockRepositoryMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockRepository)(nil).FullName))
}

// GitClient mocks base method.
func (m *MockRepository) GitClient(ctx context.Context, connectionFactory azdo.ConnectionFactory) (git.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitClient", ctx, connectionFactory)
	ret0, _ := ret[0].(git.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitClient indicates an expected call of GitClient.
func (mr *MockRepositoryMockRecorder) GitClient(ctx, connectionFactory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitClient", reflect.TypeOf((*MockRepository)(nil).GitClient), ctx, connectionFactory)
}

// GitRepository mocks base method.
func (m *MockRepository) GitRepository(ctx context.Context, repoClient git.Client) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepository", ctx, repoClient)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitRepository indicates an expected call of GitRepository.
func (mr *MockRepositoryMockRecorder) GitRepository(ctx, repoClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepository", reflect.TypeOf((*MockRepository)(nil).GitRepository), ctx, repoClient)
}

// Hostname mocks base method.
func (m *MockRepository) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockRepositoryMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockRepository)(nil).Hostname))
}

// Name mocks base method.
func (m *MockRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRepository)(nil).Name))
}

// Organization mocks base method.
func (m *MockRepository) Organization() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(string)
	return ret0
}

// Organization indicates an expected call of Organization.
func (mr *MockRepositoryMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockRepository)(nil).Organization))
}

// OrganizationUrl mocks base method.
func (m *MockRepository) OrganizationUrl() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationUrl")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationUrl indicates an expected call of OrganizationUrl.
func (mr *MockRepositoryMockRecorder) OrganizationUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationUrl", reflect.TypeOf((*MockRepository)(nil).OrganizationUrl))
}

// Project mocks base method.
func (m *MockRepository) Project() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project")
	ret0, _ := ret[0].(string)
	return ret0
}

// Project indicates an expected call of Project.
func (mr *MockRepositoryMockRecorder) Project() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockRepository)(nil).Project))
}

// ProjectUrl mocks base method.
func (m *MockRepository) ProjectUrl() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUrl")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUrl indicates an expected call of ProjectUrl.
func (mr *MockRepositoryMockRecorder) ProjectUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUrl", reflect.TypeOf((*MockRepository)(nil).ProjectUrl))
}

// RemoteUrl mocks base method.
func (m *MockRepository) RemoteUrl(protocol string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteUrl", protocol)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteUrl indicates an expected call of RemoteUrl.
func (mr *MockRepositoryMockRecorder) RemoteUrl(protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteUrl", reflect.TypeOf((*MockRepository)(nil).RemoteUrl), protocol)
}

// String mocks base method.
func (m *MockRepository) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRepositoryMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRepository)(nil).String))
}
