// Code generated by MockGen. DO NOT EDIT.
// Source: internal/azdo/connection.go
//
// Generated by this command:
//
//	mockgen -source internal/azdo/connection.go -package=mocks -destination internal/mocks/connection_factory_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	azuredevops "github.com/microsoft/azure-devops-go-api/azuredevops/v7"
	core "github.com/microsoft/azure-devops-go-api/azuredevops/v7/core"
	git "github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"
	graph "github.com/microsoft/azure-devops-go-api/azuredevops/v7/graph"
	identity "github.com/microsoft/azure-devops-go-api/azuredevops/v7/identity"
	security "github.com/microsoft/azure-devops-go-api/azuredevops/v7/security"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionFactory is a mock of ConnectionFactory interface.
type MockConnectionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionFactoryMockRecorder
	isgomock struct{}
}

// MockConnectionFactoryMockRecorder is the mock recorder for MockConnectionFactory.
type MockConnectionFactoryMockRecorder struct {
	mock *MockConnectionFactory
}

// NewMockConnectionFactory creates a new mock instance.
func NewMockConnectionFactory(ctrl *gomock.Controller) *MockConnectionFactory {
	mock := &MockConnectionFactory{ctrl: ctrl}
	mock.recorder = &MockConnectionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionFactory) EXPECT() *MockConnectionFactoryMockRecorder {
	return m.recorder
}

// Connection mocks base method.
func (m *MockConnectionFactory) Connection(organization string) (*azuredevops.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection", organization)
	ret0, _ := ret[0].(*azuredevops.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connection indicates an expected call of Connection.
func (mr *MockConnectionFactoryMockRecorder) Connection(organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockConnectionFactory)(nil).Connection), organization)
}

// Context mocks base method.
func (m *MockConnectionFactory) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConnectionFactoryMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConnectionFactory)(nil).Context))
}

// Core mocks base method.
func (m *MockConnectionFactory) Core(ctx context.Context, organization string) (core.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Core", ctx, organization)
	ret0, _ := ret[0].(core.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Core indicates an expected call of Core.
func (mr *MockConnectionFactoryMockRecorder) Core(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Core", reflect.TypeOf((*MockConnectionFactory)(nil).Core), ctx, organization)
}

// Git mocks base method.
func (m *MockConnectionFactory) Git(ctx context.Context, organization string) (git.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Git", ctx, organization)
	ret0, _ := ret[0].(git.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Git indicates an expected call of Git.
func (mr *MockConnectionFactoryMockRecorder) Git(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Git", reflect.TypeOf((*MockConnectionFactory)(nil).Git), ctx, organization)
}

// Graph mocks base method.
func (m *MockConnectionFactory) Graph(ctx context.Context, organization string) (graph.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Graph", ctx, organization)
	ret0, _ := ret[0].(graph.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Graph indicates an expected call of Graph.
func (mr *MockConnectionFactoryMockRecorder) Graph(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Graph", reflect.TypeOf((*MockConnectionFactory)(nil).Graph), ctx, organization)
}

// Identity mocks base method.
func (m *MockConnectionFactory) Identity(ctx context.Context, organization string) (identity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity", ctx, organization)
	ret0, _ := ret[0].(identity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identity indicates an expected call of Identity.
func (mr *MockConnectionFactoryMockRecorder) Identity(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockConnectionFactory)(nil).Identity), ctx, organization)
}

// Security mocks base method.
func (m *MockConnectionFactory) Security(ctx context.Context, organization string) (security.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Security", ctx, organization)
	ret0, _ := ret[0].(security.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Security indicates an expected call of Security.
func (mr *MockConnectionFactoryMockRecorder) Security(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Security", reflect.TypeOf((*MockConnectionFactory)(nil).Security), ctx, organization)
}
