// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/alias_config.go
//
// Generated by this command:
//
//	mockgen -source internal/config/alias_config.go -mock_names Client=MockConfigAlias -package=mocks -destination internal/mocks/config_alias.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAliasConfig is a mock of AliasConfig interface.
type MockAliasConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAliasConfigMockRecorder
	isgomock struct{}
}

// MockAliasConfigMockRecorder is the mock recorder for MockAliasConfig.
type MockAliasConfigMockRecorder struct {
	mock *MockAliasConfig
}

// NewMockAliasConfig creates a new mock instance.
func NewMockAliasConfig(ctrl *gomock.Controller) *MockAliasConfig {
	mock := &MockAliasConfig{ctrl: ctrl}
	mock.recorder = &MockAliasConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAliasConfig) EXPECT() *MockAliasConfigMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAliasConfig) Add(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAliasConfigMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAliasConfig)(nil).Add), arg0, arg1)
}

// All mocks base method.
func (m *MockAliasConfig) All() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockAliasConfigMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAliasConfig)(nil).All))
}

// Delete mocks base method.
func (m *MockAliasConfig) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAliasConfigMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAliasConfig)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockAliasConfig) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAliasConfigMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAliasConfig)(nil).Get), arg0)
}
